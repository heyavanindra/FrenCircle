// <auto-generated />
using System;
using System.Net;
using Linqyard.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Linqyard.Api.Migrations
{
    [DbContext(typeof(LinqyardDbContext))]
    [Migration("20251003162608_Add CoverArt")]
    partial class AddCoverArt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Linqyard.Entities.Analytics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("At")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("text");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("At");

                    b.HasIndex("LinkId");

                    b.HasIndex("UserId");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("Linqyard.Entities.AppConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("AppConfigs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Key = "GoogleLoginEnabled",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "true"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Key = "OtpExpiryMinutes",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "10"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Key = "OtpMaxAttempts",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "5"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Key = "SessionIdleTimeoutDays",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "14"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Key = "SessionAbsoluteLifetimeDays",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "60"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Key = "TwoFactorRequired",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "false"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Key = "SignupDisabled",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "false"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Key = "PasswordMinLength",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "8"
                        });
                });

            modelBuilder.Entity("Linqyard.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("At")
                        .HasColumnType("timestamptz");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Metadata");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("UserId", "At");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Linqyard.Entities.ExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LinkedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderEmail")
                        .HasColumnType("text");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderUserId")
                        .IsUnique();

                    b.ToTable("ExternalLogins");
                });

            modelBuilder.Entity("Linqyard.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "Sequence");

                    b.HasIndex("UserId", "Sequence");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Linqyard.Entities.LinkGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UserId", "Sequence");

                    b.ToTable("LinkGroups");
                });

            modelBuilder.Entity("Linqyard.Entities.OtpCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ConsumedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email", "Purpose", "ExpiresAt");

                    b.ToTable("OtpCodes");
                });

            modelBuilder.Entity("Linqyard.Entities.RateLimitBucket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WindowStart")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("Key", "WindowStart");

                    b.ToTable("RateLimitBuckets");
                });

            modelBuilder.Entity("Linqyard.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("ReplacedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("ReplacedById");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId", "SessionId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Linqyard.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator with full system access",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Moderator with moderation privileges",
                            Name = "mod"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Pro user with premium features",
                            Name = "user_pro"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Plus user with enhanced features",
                            Name = "user_plus"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Standard user",
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Linqyard.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<DateTimeOffset>("LastSeenAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "LastSeenAt");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Linqyard.Entities.TwoFactorCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ConsumedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.HasIndex("UserId", "ExpiresAt");

                    b.ToTable("TwoFactorCodes");
                });

            modelBuilder.Entity("Linqyard.Entities.TwoFactorMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TwoFactorMethods");
                });

            modelBuilder.Entity("Linqyard.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<bool>("VerifiedBadge")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Linqyard.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Linqyard.Entities.Analytics", b =>
                {
                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.AuditLog", b =>
                {
                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.ExternalLogin", b =>
                {
                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("ExternalLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.Link", b =>
                {
                    b.HasOne("Linqyard.Entities.LinkGroup", "Group")
                        .WithMany("Links")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("Links")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.LinkGroup", b =>
                {
                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("LinkGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.RefreshToken", b =>
                {
                    b.HasOne("Linqyard.Entities.RefreshToken", "ReplacedBy")
                        .WithMany()
                        .HasForeignKey("ReplacedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Linqyard.Entities.Session", "Session")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplacedBy");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.Session", b =>
                {
                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.TwoFactorCode", b =>
                {
                    b.HasOne("Linqyard.Entities.TwoFactorMethod", "Method")
                        .WithMany("TwoFactorCodes")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("TwoFactorCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.TwoFactorMethod", b =>
                {
                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("TwoFactorMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.UserRole", b =>
                {
                    b.HasOne("Linqyard.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Linqyard.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Linqyard.Entities.LinkGroup", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Linqyard.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Linqyard.Entities.Session", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Linqyard.Entities.TwoFactorMethod", b =>
                {
                    b.Navigation("TwoFactorCodes");
                });

            modelBuilder.Entity("Linqyard.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ExternalLogins");

                    b.Navigation("LinkGroups");

                    b.Navigation("Links");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Sessions");

                    b.Navigation("TwoFactorCodes");

                    b.Navigation("TwoFactorMethods");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
